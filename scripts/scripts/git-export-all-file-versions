#!/bin/bash

#export LC_ALL="en_US.UTF-8"
#export LC_ALL="POSIX"

# we'll write all git versions of the file to this folder:
EXPORT_TO=all_versions_exported

# take relative path to the file to inspect
GIT_PATH_TO_FILE=$1

# ---------------- don't edit below this line --------------

USAGE="Please cd to the root of your git proj and specify path to file you with to inspect (example: $0 some/path/to/file)"

# check if got argument
if [ "${GIT_PATH_TO_FILE}" == "" ]; then
    echo "error: no arguments given. ${USAGE}" >&2
    exit 1
fi

# check if file exist
if [ ! -f ${GIT_PATH_TO_FILE} ]; then
    echo "error: File '${GIT_PATH_TO_FILE}' does not exist. ${USAGE}" >&2
    exit 1
fi

# extract just a filename from given relative path (will be used in result file names)
GIT_SHORT_FILENAME=$(basename $GIT_PATH_TO_FILE)

# create folder to store all revisions of the file
if [ ! -d ${EXPORT_TO} ]; then
    echo "creating folder: ${EXPORT_TO}"
    mkdir ${EXPORT_TO}
fi

## uncomment next line to clear export folder each time you run script
#rm ${EXPORT_TO}/*

# reset coutner
COUNT=0

# iterate all revisions
git rev-list --all --objects -- ${GIT_PATH_TO_FILE} |
    cut -d ' ' -f1 |
while read h; do
    echo "====================="
     COUNT=$((COUNT + 1))
     COUNT_PRETTY=$(printf "%04d" $COUNT)
     echo "git show $h to head -3"
     echo `git show $h | head -3`
     COMMIT_DATE=`git show $h |  head -3 | awk '/^Date:/ {h = substr($5, 1, 2); m = substr($5, 4, 2); s = substr($5, 7, 2); printf("%s-%s-%sT%s_%s_%s", $4, $3, $6, h, m, s); exit 0}'`
     if [ "${COMMIT_DATE}" != "" ]; then
	 outf="${EXPORT_TO}/${COUNT_PRETTY}.${COMMIT_DATE}.${h}.${GIT_SHORT_FILENAME}"
	 echo Output to $outf
         git cat-file -p "${h}:${GIT_PATH_TO_FILE}" > "$outf"
     fi
done    

# return success code
echo "result stored to ${EXPORT_TO}"
exit 0
